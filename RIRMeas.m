% Generated by Impulse Response Measurer on 21-Mar-2024 22:45:35 UTC-06:00.
clc; clear; close all;
%% Device Settings
device = "ASIO4ALL v2"; % Audio device name
fs = 44100;				% Sample rate (Hz)
L = 1024; 				% Samples per frame
recChMap = 1;			% Recorder channel mapping
playChMap = 1;			% Player channel mapping
nbPlayCh = 1;			% Total number of playback channels
nbRecCh = 1;			% Total number of recorder channels

%% Method Settings (Exponential Swept Sine)
durationPerRun = 2; 	% Duration per Run (s)
percentage = input('Enter the percentage of the volume: ');
if percentage > 100 || percentage < 0
    percentage = 50;
end
outputLevel = 20*log10(percentage/100);		% Excitation Level (dBFS)
% Advanced Run Settings
nbWarmUps = 0;			% Number of warm-up runs
% Advanced Excitation Settings
sweepRange = [10 22000]; % Sweep start/stop frequency (Hz)
sweepDur = 1;			% Sweep Duration (s)
% IR measurement duration corresponds to the silent time after the sweep
irDur = durationPerRun - sweepDur;
%% Create the excitation signal
% Use sweeptone to generate one run of the excitation
exc = sweeptone( ...
    sweepDur,irDur,fs, ...
    ExcitationLevel=outputLevel, ...
    SweepFrequencyRange=sweepRange);

% Add startup silence
lengthStartSilence = max(ceil(0.1*fs),L);
startSilence = zeros(lengthStartSilence,nbPlayCh);
excSequence = [ ...
    startSilence; ...
    repmat(exc,1,nbPlayCh)];
% Keep track of which parts correspond to the excitation and not silence
recIdx = logical([ ...
    startSilence(:,1); ...
    ones(size(exc))]);

% Allocate the input/output buffers
sequenceLength = size(excSequence,1);
bufExc = dsp.AsyncBuffer(sequenceLength+L);
bufRec = dsp.AsyncBuffer(sequenceLength+2*L);

mode = input("Do you want a sinesweep(1) or just recording(0)? ");
if mode == 0
    excSequence = excSequence.*0;
end

% Copy the excitation to the output buffer (including one extra
% frame of silence to account for minimum latency of one frame)
write(bufExc,excSequence);
write(bufExc,zeros(L,nbPlayCh));

%% Play and capture using the selected device

% Setup the capture device
apr = audioPlayerRecorder( ...
    fs,Device=device, ...
    PlayerChannelMapping=playChMap, ...
    RecorderChannelMapping=recChMap);
setup(apr,zeros(L,nbPlayCh));

% Playback and capture loop
while bufExc.NumUnreadSamples > 0
    disp("Recording...")
    x = read(bufExc,L);
    [y,under,over] = apr(x);    
    write(bufRec,y);
    if under>0 || over>0
        error("Underrun or overrun occurred, terminating measurement")
    end
end
disp("Completed")
% Release the audio device
release(apr);

%% Compute the results
disp("Computing results...")

% Get the recording from the input buffer, but throw
% away the first frame (minimum latency is one frame)
read(bufRec,L);
rec = read(bufRec);
recWithoutPauses = rec(recIdx,:);

% Compute the impulse response of the recording
ir = impzest(exc,recWithoutPauses,WarmupRuns=nbWarmUps);
audiowrite("ImpulseResponse.wav",ir,fs)
input.y = ir;
inpuy.fs = fs;
room_dim = [5.7, 5.2, 2.8];
%% Analize RIR

[RIRsq, DC, t, AcousticParams] = RIR_Analisys(1,"ImpulseResponse.wav",room_dim);
%[RIRsq, DC, t, AcousticParams] = RIR_Analisys(2,input,room_dim);