% Generated by Impulse Response Measurer on 05-Mar-2024 01:44:40 UTC-06:00.
function capture = Sweep(fs,L,durationPerRun,outputLevel,nbWarmUps,sweepRange,sweepDur,NameofTheFile)
    %% Device Settings
    device = "ASIO4ALL v2"; % Audio device name
    
    recChMap = 1;			% Recorder channel mapping
    playChMap = 1;			% Player channel mapping
    nbPlayCh = 1;			% Total number of playback channels
    nbRecCh = 1;			% Total number of recorder channels
    
    %% Method Settings (Exponential Swept Sine)
    
    % IR measurement duration corresponds to the silent time after the sweep
    irDur = durationPerRun - sweepDur;
    
    %% Create the excitation signal
    % Use sweeptone to generate one run of the excitation
    exc = sweeptone( ...
        sweepDur,irDur,fs, ...
        ExcitationLevel=outputLevel, ...
        SweepFrequencyRange=sweepRange);
    plot(exc)
    
    % Add startup silence
    lengthStartSilence = max(ceil(0.1*fs),L);
    startSilence = zeros(lengthStartSilence,nbPlayCh);
    excSequence = [ ...
        startSilence; ...
        repmat(exc,1,nbPlayCh)];
    % Keep track of which parts correspond to the excitation and not silence
    recIdx = logical([ ...
        startSilence(:,1); ...
        ones(size(exc))]);
    
    % Allocate the input/output buffers
    sequenceLength = size(excSequence,1);
    bufExc = dsp.AsyncBuffer(sequenceLength+L);
    bufRec = dsp.AsyncBuffer(sequenceLength+2*L);
    
    % Copy the excitation to the output buffer (including one extra
    % frame of silence to account for minimum latency of one frame)
    write(bufExc,excSequence);
    write(bufExc,zeros(L,nbPlayCh));
    
    %% Play and capture using the selected device
    disp("Recording...")
    
    % Setup the capture device
    apr = audioPlayerRecorder( ...
        fs,Device=device, ...
        PlayerChannelMapping=playChMap, ...
        RecorderChannelMapping=recChMap);
    setup(apr,zeros(L,nbPlayCh));
    
    % Playback and capture loop
    while bufExc.NumUnreadSamples > 0
        x = read(bufExc,L);
        [y,under,over] = apr(x);
        write(bufRec,y);
        if under>0 || over>0
            error("Underrun or overrun occurred, terminating measurement")
        end
    end
    
    % Release the audio device
    release(apr);
    
    %% Compute the results
    disp("Computing results...")
    
    % Get the recording from the input buffer, but throw
    % away the first frame (minimum latency is one frame)
    read(bufRec,L);
    rec = read(bufRec);
    recWithoutPauses = rec(recIdx,:);
    
    % Compute the impulse response of the recording
    ir = impzest(exc,recWithoutPauses,WarmupRuns=nbWarmUps);
    t_sec = (0:length(ir)-1).'/fs;	 % time vector
    
    % Compute the magnitude response (IRdb)
    nbPoints = 2^14;
    IR = zeros(nbPoints,nbRecCh,"like",complex(ir(1)));
    for ii = 1:nbRecCh
        [IR(:,ii),f_Hz] = freqz(ir(:,ii),1,nbPoints,fs);
    end
    IRdB = 20*log10(max(abs(IR),realmin));
    
    % Compute the phase response
    phase = unwrap(angle(IR));
    
    % Create output structure
    capture = struct(zeros(0,nbRecCh));
    for ii = 1:nbRecCh
        capture(ii).ImpulseResponse.Time = t_sec;
        capture(ii).ImpulseResponse.Amplitude = ir(:,ii);
        capture(ii).MagnitudeResponse.MagnitudeDB = IRdB(:,ii);
        capture(ii).MagnitudeResponse.Frequency = f_Hz;
        capture(ii).PhaseResponse.Phase = phase(:,ii);
        capture(ii).PhaseResponse.Frequency = f_Hz;
    end
    audiowrite(NameofTheFile,ir,fs);
    %% Display results
    % f = clf; % clear and reuse figure
    % tl = tiledlayout(f,2,1);
    % title(tl,"Impulse Response Measurement")
    % ax1 = plotTile(tl,t_sec,ir,[1 1],"linear","Impulse Response","Amplitude","Time (s)");
    % plotTile(tl,f_Hz,IRdB,[1 1],"log","Magnitude Response","Magnitude (dB)","Frequency (Hz)");
    % leg = legend(ax1,compose("Ch. %d",recChMap),Orientation="horizontal");
    % leg.Layout.Tile = "south";
    
    %% Plot one tile in the figure
    % function ax = plotTile(tile,x,y,tilespan,xScale,titlelbl,ylbl,xlbl)
    % ax = nexttile(tile,tilespan);
    % plot(ax,x,y)
    % title(ax,titlelbl)
    % ylabel(ax,ylbl)
    % xlabel(ax,xlbl)
    % ymin = min(y,[],"all");
    % ymax = max(y,[],"all");
    % yspan = ymax - ymin;
    % ax.YLim = [ymin-.1*yspan ymax+.1*yspan];
    % if strcmp(xScale,"log")
    %     ax.XLim = [x(find(x>0,1)) x(end)];
    %     ax.XScale = "log";
    % else
    %     ax.XLim = [0 x(end)];
    % end
    % grid(ax,"on")
    % end
end